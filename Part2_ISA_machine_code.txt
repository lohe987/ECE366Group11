#load 000 RR RR
#store 001 RR RR
#add 010 RR RR
#beq 011 RR RR #we need to make this more clear.
#slt 100 RR RR
#init 101 RR ii
#slr 110 00 RR
#and 110 01 RR
#jump 110 10 RR
#xor 111 RR	RR
# This is part two of project 2 searching for best matching     # score and count.
# M[8] = beginning of Pattern_Array
# M[7] = temp score # 2
# M[6] = temp score holder
# M[5] = best_matching_count
# M[4] = best_mathing_Score
# M[3] = target
# M[2] = 16 a counter for each compare
# M[1] = the address of beginning of pattern
# M[0] = be used as a counter for number of patterns
11010001 
01010101 
01011001 
11011101 
00101110 #r3 = 2
00101011 #r2 = 3
10101111 # r3 = 4
01010000 
10100011 #r0 = 4
10101111 #r3 = 8
00011101 #M[1] = 8; the address of beginning of pattern
10101111 # r3 = 16
00011110 #M[2] = 16 a counter for each compare
10101111 # r3 = 32
11010100 
00100111 # r1= 32
10101111 # r3 = 64
11011000 
00101011 #r2 = 64
00101101 # r3 = 96
10101100 # r3 = 100
01010000 
10011100 # saves 100 into M[0] to be used as a counter
01010011 
10100000 
00101000 
01101010 #jumps 62 lines to begin
#Big loop:
11010001 
01010101 
10100101 
10100000 #2
10100000 #4
10100000 #8
10100000 #16
00010001 #sets bit counter back to 16
11010001 
01010101 
10100101 #2
10100101 #4
10100000 #2
00100001 #6
00001001 #r2 = M[4] best score
00001100 #r3 = M[6] temp best score
#if they match add to match count
01010101 
01010011 
10100101 #2
10100101 #4
10100101 #8
10100101 #16
10100000 #-2
00100100 #14
10111011 
01101001 #to end of incrementing match count (14)
11010001 
01010101 
10100000 #2
10100000 #4
00100001 #5
10001000 # loads match count
10101001 # increments match count
00011000 # stores match count
10100101 #2
10100101 #4
00100001 #r0=9
10100000 #18
11101000 #to where M[6] is switched to 0 (18)
# if they are not equal are is the temp score larger
# if so write new value into best score
01001011 # if r2<r3 r0=1
01010101 
01011001 
10101010 #2
10101010 #4
10101010 #8
10101001 #9
10110001 # skips jump to store new value in best
01101010 #jumps to set temp counter to 0 (9)
11010001 
10100000 
10100000 
10011100 # if r2<r3 then M[4] = r3 (r0=1)
01010101 
00100001 
11010100 
00010100 #if new best score found match=0
11010001 
11010100 
10100000 #r0=2
00100100 #r1=2
10100000 #r0=4
00100001 #r0=6
11010100 
00010100 #sets temp counter (M[6]) to 0
01010000 # where it actually begins to decrement
11010111 
00001100 
00101101 
10011100 #storing decremented counter M[0]
01010101 
10001101 #loads the value for loading the pattern array
10001011 #loads the value of the pattern array
10100101 #make r1 = 2
11010001 
00100100 
00000101 #load the target word
11110110 #the number of 0s in r1 is = to # of bits match
11101101 #NOT's r1 to that the 0's become 1's
#loop:
01011100 
01010011 
11011000 
10100000 #-2
10100000 #-4
10100000 #-8
10100000 #-16
10100000 #-32
10101100 #-32
10100011 #-64
10101100 #-96
00101011 #literally to make jump value easier
01011001 
01010000 
10101010 
00001010 
10111000 # if M[2] = goes to jump at mem
00110000 # jumps next line if above statment is not true
11101011 #jumps to line *big loop* in code for new pattern
11011101 
11011000 
10101001 # r2 = 16bit NXOR of target & pattern
01100110 #if the first bit matches result =1
01010000 
10101111 #r3 = 2
10100011 
10101111 #r3 = 4
10101100 # r3 = 6
00000011 #loads the existing value for best score temp
00101000 #adds the result of and to the best temp score counter
00011011 #saves r2 back to best temp score
11100001 
01011001 
10101010 #r2 = 2
10001110 #loads the counter (from 16 down)
01010011 
10101100 
00011110 # saves the counter back in after -1
01010011 
01011100 
11011000 #literally because odd numbers suck
10100000 #-2
10100000 #-4
10100000 #-8
10100000 #-16
10101100 #-16
10100000 #-32
10100011 #-48
11101000 #back to *loop*
