
11010001 
00000000 #loads in the value of Q into the register
11010100 

11011101 
01011001 
10101111 #R3=2
10101111 #R3=4
00101110 #R3=5


#case for Q=1
01010101 #R1=1
10100101 #R1=2
10100101 #R1=2
00101101 #R3=7
10110010 #checks if Q is equal to 1
11101011 #jumps 7 to main loop

#branch of mem[2]=0
11010001 
11010100 
10100000 #R0=2
00010100 # Stores at 2 the value of 0 because anything modded with 0 is 0
11010111 
01101001 # dead loop

# start of main loop
11010100 
01011001 
11011101 
10101010 #R2=2
00100010 #R0=2
10101010 #R2=4
10010110 # at mem[4]=0 for keep track of counter
10100110 #R1=4
10101010 #R2=8
00101011 #R2=9
00100100 #R1=6
00100111 #R1=7
00011101 # at mem[7]=1 for multiplication loop counter

#branch for mem[10]=156
01010101 
10100101 #R1=2
10100101 #R1=4
10100101 #R1=8
10100101 #R1=16
10100101 #R1=32
11011000 
10101001 #R2=32
10100101 #R1=64
10100101 #R1=128
10100110 #R1=160
01011010 
10101010 #R2=-4
10100110 #R1=156
11010001 
10100000 #R0=2
01011100 
10101100 #R3=2
10100000 #R0=4
10100000 #R0=8
10100011 #R0=10
00010100 #156=mem[10]

#branch for mem[12]=41
01010101 
01010101 
10100101 #R1=2
10100101 #R1=4
10100101 #R1=8
01010000 
00100001 #R0=8
10100101 #R1=16
10100101 #R1=32
00100100 #R1=40
11010001 
00100100 #R1=41
01011001 
10101010 #R2=2
10101010 #R2=4
01011100 
00101110 #R3=4
10101010 #R2=8
00101011 #R2=12
10010110 #41=mem[12]

#branch for mem[14]=-39
11010010 
10100000 #R0=-4
10100000 #R0=-8
11010100 
00100100 #R1=-8
10100000 #R0=-16
10100000 #R0=-32
00100001 #R0=-40
01010101 
00100001 #R0=-39
01010101 
10100101 #R1=2
10100101 #R1=4
10100101 #R1=8
10100101 #R1=16
01011010 
10100110 #R1=14
00010001 #-39=mem[14]

#branch for mem[16]=38
01010101 
01010101 
10100101 #R1=2
10100101 #R1=4
10100101 #R1=8
01010000 
00100001 #R0=8
10100101 #R1=16
10100101 #R1=32
00100100 #R1=40
11010010 
00100100 #R1=38
11010001 
10100000 #R0=2
10100000 #R0=4
10100000 #R0=8
10100000 #R0=16
00010100 #38=mem[16]

#branch for mem[18]=15
11010001 
10100000 #R0=2
11010100 
00100100 #R1=2
10100000 #R0=4
10100000 #R0=8
10100000 #R0=16
00100001 #R0=18
01010101 
10100101 #R1=2
10100101 #R1=4
10100101 #R1=8
10100101 #R1=16
11011011 
10100110 #R1=15
00010100 #15=mem[18]

#branch for mem[20]=28
01010101 
10100101 #R1=2
00100001 #R0=20
01010101 
10100101 #R1=2
10100101 #R1=4
10100101 #R1=8
00100100 #R1=28
00010100 #28=mem[20]

#branch for mem[22]=-48
01010101 
10100101 #R1=2
00100001 #R0=22
01010110 
10100101 #R1=-4
10100101 #R1=-8
10100101 #R1=-16
11011000 
10101001 #R2=-16
10100101 #R1=-32
10100110 #R1=-48
00010100 #-48=mem[22]

#branch for mem[24]=-173
01010101 
10100101 #R1=2
00100001 #R0=24
01010110 
10100101 #R1=-4
10100101 #R1=-8
10100101 #R1=-16
10100101 #R1=-32
11011000 
10101001 #R2=-32
10100101 #R1=-64
10100101 #R1=-128
10100110 #R1=-160
01011010 
10101010 #R2=-4
10101010 #R2=-8
10101010 #R2=-16
10100110 #R1=-176
01011001 
10100110 #R1=-175
10100110 #R1=-174
10100110 #R1=-173
00010100 #-173=mem[24]



01010101 #while loop
01011001 
01011100 
10100101 #R1=2
10100101 #R1=4
00000101 #R1=counter
00001111 #R3=P
01000111 
01010101 
01011100 
10100101 #R1=2
00101101 #R3=2
10100101 #R1=4
10100101 #R1=8
00100111 #R1=10
00000101 #R1=mem[10]=156
10110010 #if counter<Q
01101001 #jumps to done
01010000 #start of multiplication branch
01010101 
01011001 
10100101 #R1=2
10100101 #R1=4
00001001 #R2=bigCounter
01010101 
01011100 
10100101 #R1=2
00101101 #R3=2
10100101 #R1=4
10100101 #R1=8
00100111 #R1=10
00100111 #R1=12
00000101 #R1=mem[12]=41
10111000 
01101001 #jumps to branch where mem[6]=6
11010001 #loop for multiplication
01011001 
10100000 #R0=2
11010100 
00100100 
10100000 #R0=4
00100001 #R0=6
00001100 #R3=currentVal
00100010 # R0=7
10001000 #R2=multiplication loop counter
01001011 
11011101 
01010101 
10100101 #R1=2
10100101 #R1=4
10100101 #R1=8
10100101 #R1=16
00000101 #R1=mem[16]=38
00110011 #if counter != currentVal jumps over the exit
01101001 #jumps to store new currentVal
11011101 
00101011 # counter++
00011000 # mem[7]=counter
10100011 # R0=8
10000100 # R1=newVal
01011010 # R2=-2
01011100 # R3=0
10101100 # R3=8
00101110 # R3=6
00100111 #newVal=newVal+6
00010100 # mem[8]=newVal
01010101 
11010010 
10100101 #R1=2
10100101 #R1=4
10100101 #R1=8
10100101 #R1=16
00100100 #R1=14
00000101 #R1=mem[14]=-39
01101001 #jumps back to beginning of multiplication loop
11010001 #branch where mem[6]=6
11010100 
10100000 #R0=2
00100100 #R1=2
10100000 #R0=4
00100001 #R0=6
10010000 #stores mem[6]=6
11010001 
10100000 #R0=2
11010100 
00100100 #R1=2
10100000 #R0=4
10100000 #R0=8
10100000 #R0=16
00100001 #R0=18
00000000 #R0=mem[18]=15
11101000 #jumps to mod
11010001 #branch stores newVal to currentVal
11010100 
11011000 
01011100 
10100000 #R0=2
00100100 #R1=2
10100000 #R0=4
00100001 #R0=6
00101000 #R2=6
10101001 #R2=8
10001110 #R3=newVal
11010100 
10010110 #stores mem[8]=0=newVal
10011100 #stores mem[6] = newVal=currentVal
11010001 #mod branch start
11010100 
10100000 #R0=2
00100100 #R1=2
10100000 #R0=4
00100001 #R0=6
10000100 #R1=currentVal
01011001 
00001010 #R2=Q
11001001 #checks if condition is met
11011101 
01010101 
10100101 #R1=2
10100101 #R1=4
11011000 
00101000 #R2=4
10100101 #R1=8
10100101 #R1=16
10100110 #R1=20
00000101 #R1=mem[20]=28
00110011 #check is if Q<currentVal
01101001 #jumps to end
11010001 
11010100 
10100000 #R0=2
00100100 #R1=2
10100000 #R0=4
00100001 #R0=6
10000100 #R1=currentVal
01011001 
00001010 #R2=Q
01011100 
00101110 #R3=Q
01101111 #R3=-Q
01011001 
00101110 #R3=-Q for the twoscomplement
00100111 #currentVal=currentVal-Q
00010100 #stores at mem[6]=currentVal
01010101 
10100101 #R1=2
10100101 #R1=4
11011000 
00101000 #R2=4
10100101 #R1=8
10100101 #R1=16
10100110 #R1=20
10100110 #R1=24
01011010 
10100110 #R1=22
00000101 #R1=mem[22]=-48
01101001 #jumps back to mod branch start
11010001 #end
01011001 
10100000 #R0=2
01011100 
10101100 #R3=2
10100000 #R0=4
10000100 #R1=counter
10100110 #counter++
00010100 #mem[4]=counter
01010101 
10100101 #R1=2
10100101 #R1=4
10100101 #R1=8
01010000 
00100001 #R0=8
10100101 #R1=16
00100100 #R1=24
00000101 #R1=mem[24]=-173
01101001 #jumps to while loop
11010001 #done
11010100 
01011001 
10101010 #R2=2
10100000 #R0=2
00100100 #R1=2
10100000 #R0=4
00100001 #R0=6
00000000 #R0=currentVal
00010010 #stores mem[2]=currentVal=R
